from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit import execute, Aer
import numpy as np

backend = Aer.get_backend('qasm_simulator')

shots = 10000

qc = QuantumCircuit()

q = QuantumRegister(12, 'q')
meas = ClassicalRegister(12, 'meas')

qc.add_register(q)
qc.add_register(meas)

qc.u(np.pi / 2, 0, -np.pi, q[0])

qc.u(np.pi / 2, 0, -np.pi, q[1])

qc.u(np.pi / 2, 0, -np.pi, q[2])

qc.u(np.pi / 2, 0, -np.pi, q[3])

qc.u(np.pi / 2, 0, -np.pi, q[4])

qc.u(np.pi / 2, 0, -np.pi, q[5])

qc.u(np.pi / 2, 0, -np.pi, q[6])

qc.u(np.pi / 2, 0, -np.pi, q[7])

qc.u(np.pi / 2, 0, -np.pi, q[8])

qc.u(np.pi / 2, 0, -np.pi, q[9])

qc.u(np.pi / 2, 0, -np.pi, q[10])

qc.u(0.9272952180016122, 0, 0, q[11])
qc.cx(q[0], q[11])
qc.u(-0.9272952180016122, 0, 0, q[11])
qc.cx(q[0], q[11])
qc.u(0.9272952180016122, 0, 0, q[11])
qc.cx(q[1], q[11])
qc.u(-1.8545904360032244, 0, 0, q[11])
qc.cx(q[1], q[11])
qc.u(1.8545904360032242, 0, 0, q[11])
qc.cx(q[2], q[11])
qc.u(-3.7091808720064487, 0, 0, q[11])
qc.cx(q[2], q[11])
qc.u(2.574004435173138, -np.pi, -np.pi, q[11])
qc.cx(q[3], q[11])
qc.u(-7.4183617440128975, 0, 0, q[11])
qc.cx(q[3], q[11])
qc.u(1.135176436833311, 0, 0, q[11])
qc.cx(q[4], q[11])
qc.u(-14.836723488025795, 0, 0, q[11])
qc.cx(q[4], q[11])
qc.u(2.270352873666622, 0, 0, q[11])
qc.cx(q[5], q[11])
qc.u(-29.67344697605159, 0, 0, q[11])
qc.cx(q[5], q[11])
qc.u(1.7424795598463425, -np.pi, -np.pi, q[11])
qc.cx(q[6], q[11])
qc.u(-59.34689395210318, 0, 0, q[11])
qc.cx(q[6], q[11])
qc.u(2.7982261874869017, 0, 0, q[11])
qc.cx(q[7], q[11])
qc.u(-118.69378790420636, 0, 0, q[11])
qc.cx(q[7], q[11])
qc.u(0.6867329322057831, -np.pi, -np.pi, q[11])
qc.cx(q[8], q[11])
qc.u(-237.38757580841272, 0, 0, q[11])
qc.cx(q[8], q[11])
qc.u(1.3734658644115663, -np.pi, -np.pi, q[11])
qc.cx(q[9], q[11])
qc.u(-474.77515161682544, 0, 0, q[11])
qc.cx(q[9], q[11])
qc.u(2.7469317288231325, -np.pi, -np.pi, q[11])
qc.cx(q[10], q[11])
qc.u(-949.5503032336509, 0, 0, q[11])
qc.cx(q[10], q[11])
qc.h(q[10])
qc.u(949.5503032336509, 0, 0, q[11])
qc.cp(-np.pi / 2, q[9], q[10])
qc.cp(-np.pi / 4, q[8], q[10])
qc.cp(-np.pi / 8, q[7], q[10])
qc.cp(-np.pi / 16, q[6], q[10])
qc.cp(-np.pi / 32, q[5], q[10])
qc.cp(-np.pi / 64, q[4], q[10])
qc.cp(-np.pi / 128, q[3], q[10])
qc.cp(-np.pi / 256, q[2], q[10])
qc.cp(-np.pi / 512, q[1], q[10])
qc.cp(-np.pi / 1024, q[0], q[10])
qc.h(q[9])
qc.cp(-np.pi / 2, q[8], q[9])
qc.cp(-np.pi / 4, q[7], q[9])
qc.cp(-np.pi / 8, q[6], q[9])
qc.cp(-np.pi / 16, q[5], q[9])
qc.cp(-np.pi / 32, q[4], q[9])
qc.cp(-np.pi / 64, q[3], q[9])
qc.cp(-np.pi / 128, q[2], q[9])
qc.cp(-np.pi / 256, q[1], q[9])
qc.cp(-np.pi / 512, q[0], q[9])
qc.h(q[8])
qc.cp(-np.pi / 2, q[7], q[8])
qc.cp(-np.pi / 4, q[6], q[8])
qc.cp(-np.pi / 8, q[5], q[8])
qc.cp(-np.pi / 16, q[4], q[8])
qc.cp(-np.pi / 32, q[3], q[8])
qc.cp(-np.pi / 64, q[2], q[8])
qc.cp(-np.pi / 128, q[1], q[8])
qc.cp(-np.pi / 256, q[0], q[8])
qc.h(q[7])
qc.cp(-np.pi / 2, q[6], q[7])
qc.cp(-np.pi / 4, q[5], q[7])
qc.cp(-np.pi / 8, q[4], q[7])
qc.cp(-np.pi / 16, q[3], q[7])
qc.cp(-np.pi / 32, q[2], q[7])
qc.cp(-np.pi / 64, q[1], q[7])
qc.cp(-np.pi / 128, q[0], q[7])
qc.h(q[6])
qc.cp(-np.pi / 2, q[5], q[6])
qc.cp(-np.pi / 4, q[4], q[6])
qc.cp(-np.pi / 8, q[3], q[6])
qc.cp(-np.pi / 16, q[2], q[6])
qc.cp(-np.pi / 32, q[1], q[6])
qc.cp(-np.pi / 64, q[0], q[6])
qc.h(q[5])
qc.cp(-np.pi / 2, q[4], q[5])
qc.cp(-np.pi / 4, q[3], q[5])
qc.cp(-np.pi / 8, q[2], q[5])
qc.cp(-np.pi / 16, q[1], q[5])
qc.cp(-np.pi / 32, q[0], q[5])
qc.h(q[4])
qc.cp(-np.pi / 2, q[3], q[4])
qc.cp(-np.pi / 4, q[2], q[4])
qc.cp(-np.pi / 8, q[1], q[4])
qc.cp(-np.pi / 16, q[0], q[4])
qc.h(q[3])
qc.cp(-np.pi / 2, q[2], q[3])
qc.cp(-np.pi / 4, q[1], q[3])
qc.cp(-np.pi / 8, q[0], q[3])
qc.h(q[2])
qc.cp(-np.pi / 2, q[1], q[2])
qc.cp(-np.pi / 4, q[0], q[2])
qc.h(q[1])
qc.cp(-np.pi / 2, q[0], q[1])
qc.h(q[0])
qc.measure(q[0], meas[0])
qc.measure(q[1], meas[1])
qc.measure(q[2], meas[2])
qc.measure(q[3], meas[3])
qc.measure(q[4], meas[4])
qc.measure(q[5], meas[5])
qc.measure(q[6], meas[6])
qc.measure(q[7], meas[7])
qc.measure(q[8], meas[8])
qc.measure(q[9], meas[9])
qc.measure(q[10], meas[10])
qc.measure(q[11], meas[11])

job = execute(qc, backend=backend, shots=shots)
job_result = job.result()
print(job_result.get_counts(qc))
