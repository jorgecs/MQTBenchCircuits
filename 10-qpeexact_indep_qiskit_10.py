from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit import execute, Aer
import numpy as np

backend = Aer.get_backend('qasm_simulator')

shots = 10000

qc = QuantumCircuit()

q = QuantumRegister(10, 'q')
c = ClassicalRegister(10, 'c')

qc.add_register(q)
qc.add_register(c)

qc.h(q[0])
qc.h(q[1])
qc.h(q[2])
qc.h(q[3])
qc.h(q[4])
qc.h(q[5])
qc.h(q[6])
qc.h(q[7])
qc.h(q[8])
qc.x(q[9])
qc.cp(-2.6998061866787286, q[9], q[0])
qc.cp(0.8835729338221293, q[9], q[1])
qc.cp(9 * np.pi / 16, q[9], q[2])
qc.cp(-7 * np.pi / 8, q[9], q[3])
qc.cp(np.pi / 4, q[9], q[4])
qc.cp(np.pi / 2, q[9], q[5])
qc.cp(np.pi, q[9], q[6])
qc.swap(q[0], q[8])
qc.h(q[0])
qc.swap(q[1], q[7])
qc.cp(-np.pi / 2, q[1], q[0])
qc.swap(q[2], q[6])
qc.h(q[1])
qc.swap(q[3], q[5])
qc.cp(-np.pi / 4, q[2], q[0])
qc.cp(-np.pi / 2, q[2], q[1])
qc.h(q[2])
qc.cp(-np.pi / 8, q[3], q[0])
qc.cp(-np.pi / 4, q[3], q[1])
qc.cp(-np.pi / 2, q[3], q[2])
qc.h(q[3])
qc.cp(-np.pi / 16, q[4], q[0])
qc.cp(-np.pi / 8, q[4], q[1])
qc.cp(-np.pi / 4, q[4], q[2])
qc.cp(-np.pi / 2, q[4], q[3])
qc.h(q[4])
qc.cp(-np.pi / 32, q[5], q[0])
qc.cp(-np.pi / 16, q[5], q[1])
qc.cp(-np.pi / 8, q[5], q[2])
qc.cp(-np.pi / 4, q[5], q[3])
qc.cp(-np.pi / 2, q[5], q[4])
qc.h(q[5])
qc.cp(-np.pi / 64, q[6], q[0])
qc.cp(-np.pi / 32, q[6], q[1])
qc.cp(-np.pi / 16, q[6], q[2])
qc.cp(-np.pi / 8, q[6], q[3])
qc.cp(-np.pi / 4, q[6], q[4])
qc.cp(-np.pi / 2, q[6], q[5])
qc.h(q[6])
qc.cp(-np.pi / 128, q[7], q[0])
qc.cp(-np.pi / 64, q[7], q[1])
qc.cp(-np.pi / 32, q[7], q[2])
qc.cp(-np.pi / 16, q[7], q[3])
qc.cp(-np.pi / 8, q[7], q[4])
qc.cp(-np.pi / 4, q[7], q[5])
qc.cp(-np.pi / 2, q[7], q[6])
qc.h(q[7])
qc.cp(-np.pi / 256, q[8], q[0])
qc.cp(-np.pi / 128, q[8], q[1])
qc.cp(-np.pi / 64, q[8], q[2])
qc.cp(-np.pi / 32, q[8], q[3])
qc.cp(-np.pi / 16, q[8], q[4])
qc.cp(-np.pi / 8, q[8], q[5])
qc.cp(-np.pi / 4, q[8], q[6])
qc.cp(-np.pi / 2, q[8], q[7])
qc.h(q[8])
qc.measure(q[0], c[0])
qc.measure(q[1], c[1])
qc.measure(q[2], c[2])
qc.measure(q[3], c[3])
qc.measure(q[4], c[4])
qc.measure(q[5], c[5])
qc.measure(q[6], c[6])
qc.measure(q[7], c[7])
qc.measure(q[8], c[8])

job = execute(qc, backend=backend, shots=shots)
job_result = job.result()
print(job_result.get_counts(qc))
