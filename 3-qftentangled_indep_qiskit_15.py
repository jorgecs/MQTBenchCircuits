from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit import execute, Aer
import numpy as np

backend = Aer.get_backend('qasm_simulator')

shots = 10000

qc = QuantumCircuit()

q = QuantumRegister(15, 'q')
meas = ClassicalRegister(15, 'meas')

qc.add_register(q)
qc.add_register(meas)

qc.h(q[14])
qc.cx(q[14], q[13])
qc.cx(q[13], q[12])
qc.h(q[14])
qc.cx(q[12], q[11])
qc.cp(np.pi / 2, q[14], q[13])
qc.cx(q[11], q[10])
qc.h(q[13])
qc.cx(q[10], q[9])
qc.cp(np.pi / 4, q[14], q[12])
qc.cx(q[9], q[8])
qc.cp(np.pi / 2, q[13], q[12])
qc.cx(q[8], q[7])
qc.h(q[12])
qc.cx(q[7], q[6])
qc.cp(np.pi / 8, q[14], q[11])
qc.cx(q[6], q[5])
qc.cp(np.pi / 4, q[13], q[11])
qc.cx(q[5], q[4])
qc.cp(np.pi / 2, q[12], q[11])
qc.cx(q[4], q[3])
qc.h(q[11])
qc.cx(q[3], q[2])
qc.cp(np.pi / 16, q[14], q[10])
qc.cx(q[2], q[1])
qc.cp(np.pi / 8, q[13], q[10])
qc.cx(q[1], q[0])
qc.cp(np.pi / 4, q[12], q[10])
qc.cp(np.pi / 2, q[11], q[10])
qc.h(q[10])
qc.cp(np.pi / 32, q[14], q[9])
qc.cp(np.pi / 16, q[13], q[9])
qc.cp(np.pi / 8, q[12], q[9])
qc.cp(np.pi / 4, q[11], q[9])
qc.cp(np.pi / 2, q[10], q[9])
qc.cp(np.pi / 64, q[14], q[8])
qc.cp(np.pi / 32, q[13], q[8])
qc.cp(np.pi / 16, q[12], q[8])
qc.cp(np.pi / 8, q[11], q[8])
qc.cp(np.pi / 4, q[10], q[8])
qc.cp(np.pi / 128, q[14], q[7])
qc.cp(np.pi / 64, q[13], q[7])
qc.cp(np.pi / 32, q[12], q[7])
qc.cp(np.pi / 16, q[11], q[7])
qc.cp(np.pi / 8, q[10], q[7])
qc.cp(np.pi / 256, q[14], q[6])
qc.cp(np.pi / 128, q[13], q[6])
qc.cp(np.pi / 64, q[12], q[6])
qc.cp(np.pi / 32, q[11], q[6])
qc.cp(np.pi / 16, q[10], q[6])
qc.cp(np.pi / 512, q[14], q[5])
qc.cp(np.pi / 256, q[13], q[5])
qc.cp(np.pi / 128, q[12], q[5])
qc.cp(np.pi / 64, q[11], q[5])
qc.cp(np.pi / 32, q[10], q[5])
qc.cp(np.pi / 1024, q[14], q[4])
qc.cp(np.pi / 512, q[13], q[4])
qc.cp(np.pi / 256, q[12], q[4])
qc.cp(np.pi / 128, q[11], q[4])
qc.cp(np.pi / 64, q[10], q[4])
qc.cp(np.pi / 2048, q[14], q[3])
qc.cp(np.pi / 1024, q[13], q[3])
qc.cp(np.pi / 512, q[12], q[3])
qc.cp(np.pi / 256, q[11], q[3])
qc.cp(np.pi / 128, q[10], q[3])
qc.cp(np.pi / 4096, q[14], q[2])
qc.cp(np.pi / 2048, q[13], q[2])
qc.cp(np.pi / 1024, q[12], q[2])
qc.cp(np.pi / 512, q[11], q[2])
qc.cp(np.pi / 256, q[10], q[2])
qc.cp(np.pi / 8192, q[14], q[1])
qc.cp(np.pi / 4096, q[13], q[1])
qc.cp(np.pi / 2048, q[12], q[1])
qc.cp(np.pi / 1024, q[11], q[1])
qc.cp(np.pi / 512, q[10], q[1])
qc.cp(np.pi / 16384, q[14], q[0])
qc.cp(np.pi / 8192, q[13], q[0])
qc.cp(np.pi / 4096, q[12], q[0])
qc.cp(np.pi / 2048, q[11], q[0])
qc.cp(np.pi / 1024, q[10], q[0])
qc.h(q[9])
qc.cp(np.pi / 2, q[9], q[8])
qc.h(q[8])
qc.cp(np.pi / 4, q[9], q[7])
qc.cp(np.pi / 2, q[8], q[7])
qc.h(q[7])
qc.cp(np.pi / 8, q[9], q[6])
qc.cp(np.pi / 4, q[8], q[6])
qc.cp(np.pi / 2, q[7], q[6])
qc.h(q[6])
qc.cp(np.pi / 16, q[9], q[5])
qc.cp(np.pi / 8, q[8], q[5])
qc.cp(np.pi / 4, q[7], q[5])
qc.cp(np.pi / 2, q[6], q[5])
qc.h(q[5])
qc.cp(np.pi / 32, q[9], q[4])
qc.cp(np.pi / 16, q[8], q[4])
qc.cp(np.pi / 8, q[7], q[4])
qc.cp(np.pi / 4, q[6], q[4])
qc.cp(np.pi / 2, q[5], q[4])
qc.h(q[4])
qc.cp(np.pi / 64, q[9], q[3])
qc.cp(np.pi / 32, q[8], q[3])
qc.cp(np.pi / 16, q[7], q[3])
qc.cp(np.pi / 8, q[6], q[3])
qc.cp(np.pi / 4, q[5], q[3])
qc.cp(np.pi / 2, q[4], q[3])
qc.h(q[3])
qc.cp(np.pi / 128, q[9], q[2])
qc.cp(np.pi / 64, q[8], q[2])
qc.cp(np.pi / 32, q[7], q[2])
qc.cp(np.pi / 16, q[6], q[2])
qc.cp(np.pi / 8, q[5], q[2])
qc.cp(np.pi / 4, q[4], q[2])
qc.cp(np.pi / 2, q[3], q[2])
qc.h(q[2])
qc.cp(np.pi / 256, q[9], q[1])
qc.cp(np.pi / 128, q[8], q[1])
qc.cp(np.pi / 64, q[7], q[1])
qc.cp(np.pi / 32, q[6], q[1])
qc.cp(np.pi / 16, q[5], q[1])
qc.cp(np.pi / 8, q[4], q[1])
qc.cp(np.pi / 4, q[3], q[1])
qc.cp(np.pi / 2, q[2], q[1])
qc.h(q[1])
qc.cp(np.pi / 512, q[9], q[0])
qc.cp(np.pi / 256, q[8], q[0])
qc.cp(np.pi / 128, q[7], q[0])
qc.cp(np.pi / 64, q[6], q[0])
qc.cp(np.pi / 32, q[5], q[0])
qc.cp(np.pi / 16, q[4], q[0])
qc.cp(np.pi / 8, q[3], q[0])
qc.cp(np.pi / 4, q[2], q[0])
qc.cp(np.pi / 2, q[1], q[0])
qc.h(q[0])
qc.swap(q[0], q[14])
qc.swap(q[1], q[13])
qc.swap(q[2], q[12])
qc.swap(q[3], q[11])
qc.swap(q[4], q[10])
qc.swap(q[5], q[9])
qc.swap(q[6], q[8])
qc.measure(q[0], meas[0])
qc.measure(q[1], meas[1])
qc.measure(q[2], meas[2])
qc.measure(q[3], meas[3])
qc.measure(q[4], meas[4])
qc.measure(q[5], meas[5])
qc.measure(q[6], meas[6])
qc.measure(q[7], meas[7])
qc.measure(q[8], meas[8])
qc.measure(q[9], meas[9])
qc.measure(q[10], meas[10])
qc.measure(q[11], meas[11])
qc.measure(q[12], meas[12])
qc.measure(q[13], meas[13])
qc.measure(q[14], meas[14])

job = execute(qc, backend=backend, shots=shots)
job_result = job.result()
print(job_result.get_counts(qc))
